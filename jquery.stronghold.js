// Generated by CoffeeScript 1.3.3

(function($) {
  var Stronghold;
  Stronghold = (function() {

    function Stronghold(options) {
      var _this = this;
      $.extend(true, this, this.defaults, options);
      this.sidebarState = this.staticClass;
      this.parentOffset = this.el.position().left + this.parseAttribute(this.el.css('border-left-width'));
      this.offsetLeft = this.calculateOffset();
      this.contentOffsetTop = this.within.offset().top + this.staticOffset;
      this.window.scroll(function() {
        var cHeight, sHeight, scrollTop;
        if (_this.sidebarState === _this.preventClass) {
          return;
        }
        scrollTop = _this.window.scrollTop();
        if (scrollTop >= _this.contentOffsetTop && _this.offsetLeft) {
          sHeight = _this.el.outerHeight() + _this.parseAttribute(_this.el.css('top'));
          cHeight = _this.within.outerHeight();
          if (scrollTop > cHeight + _this.contentOffsetTop - sHeight) {
            return _this.set(_this.bottomClass, {
              left: _this.parentOffset
            });
          } else {
            return _this.set(_this.fixedClass, {
              left: _this.offsetLeft
            });
          }
        } else {
          return _this.set(_this.staticClass, {
            left: 'auto'
          });
        }
      });
      this.window.resize(function() {
        var offset;
        if (_this.sidebarState === _this.preventClass) {
          return;
        }
        _this.offsetLeft = _this.calculateOffset();
        offset = _this.sidebarState === _this.fixedClass ? _this.offsetLeft : 'auto';
        if (offset) {
          return _this.set(_this.sidebarState, {
            left: offset,
            force: true
          });
        } else {
          return _this.set(_this.staticClass, {
            left: 'auto'
          });
        }
      });
    }

    Stronghold.prototype.calculateOffset = function() {
      var left;
      left = Math.round((this.window.width() - this.within.outerWidth()) / 2) + this.parentOffset;
      if (left < 0) {
        return false;
      } else {
        return left;
      }
    };

    Stronghold.prototype.set = function(newState, params) {
      var _ref, _ref1, _ref2;
      if (params == null) {
        params = {};
      }
      if (newState === this.sidebarState && !params.force) {
        return;
      }
      if (params.left != null) {
        this.el.css('left', params.left);
      }
      switch (newState) {
        case this.staticClass:
          if ((_ref = this.onStatic) != null) {
            _ref.call(this.el[0]);
          }
          break;
        case this.fixedClass:
          if ((_ref1 = this.onFixed) != null) {
            _ref1.call(this.el[0]);
          }
          break;
        case this.bottomClass:
          if ((_ref2 = this.onBottom) != null) {
            _ref2.call(this.el[0]);
          }
      }
      this.el.removeClass(this.sidebarState).addClass(newState);
      return this.sidebarState = newState;
    };

    Stronghold.prototype.parseAttribute = function(attr) {
      return parseInt(attr, 10) || 0;
    };

    Stronghold.prototype.window = $(window);

    Stronghold.prototype.defaults = {
      preventClass: '',
      fixedClass: 'fixed',
      bottomClass: 'bottom',
      staticClass: 'static',
      staticOffset: 0,
      within: $('body')
    };

    return Stronghold;

  })();
  return $.fn.stronghold = function(method, args) {
    return this.each(function(elem) {
      var _ref, _ref1;
      if (args != null) {
        return (_ref = this._stronghold) != null ? (_ref1 = _ref[method]) != null ? _ref1.apply(this._stronghold, args) : void 0 : void 0;
      } else {
        return this._stronghold = new Stronghold($.extend(true, method, {
          el: $(this)
        }));
      }
    });
  };
})(jQuery);
